// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  username      String             @unique
  password      String
  level         String             @default("user")
  status        String             @default("active")
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  refreshTokens UserRefreshToken[]
}

model UserRefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String // เก็บ hashed refresh token
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Company {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  phone     String
  email     String?
  taxCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  serial          String?
  name            String
  release         String
  color           String
  price           Int
  customerName    String
  customerPhone   String
  customerAddress String
  remark          String
  status          String   @default("inStock")
  sell            Sell[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Sell {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  price     Int
  status    String   @default("Pending") // pending, paid, delete
  payDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     String
  remark    String?
  payDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
